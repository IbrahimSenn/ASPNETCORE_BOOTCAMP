@model IEnumerable<Kurs> 
    @* verileri tek bir liste olarak değil de sürekli güncellenebilen bir döngü olarak çekebilmek için List<Ogrenci> yerine IEnumerable<Ogrenci> kullandık *@

<h2> Kurs Ekle </h2>
<a asp asp-controller="Kurs" asp-action="Create" class="btn btn-sm btn-primary">Ekle</a>
<hr>

<table class="table table-bordered">
    <thead>
        <tr>
            @* <th> Öğrenci Id </th>
            <th> Öğrenci Adı </th>
            <th> Öğrenci Soyadı </th>
            burada sütun başlıklarını kendimiz oluşturduk. İstersek veri tabanındaki sütun adları ile şu şekilde çekebiliriz:
             *@
            <th> @Html.DisplayNameFor(m => m.KursId) </th>
            <th> @Html.DisplayNameFor(m => m.KursAdi) </th>
            <th style="width: 150px;"> Ayarlar </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr> 
                @* <td> @ogrenci.OgrenciId </td>
                <td> @ogrenci.OgrenciAd </td>
                <td> @ogrenci.OgrenciSoyad </td> 
                *@
                <td> @Html.DisplayFor(modelitem => item.KursId ) </td>
                <td> @Html.DisplayFor(modelitem => item.KursAdi ) </td>
                @* DisplayNameFor() dbdeki sütunun isimlerini çekiyor.. DisplayFor() ise sütunun içindeki bilgileri*@
                <td>
                    <a asp asp-controller="Kurs" asp-action="Edit" asp-route-id="@item.KursId" class="btn btn-sm btn-primary"> Detay </a>
                    <a asp asp-controller="Kurs" asp-action="Delete" asp-route-id="@item.KursId" class="btn btn-sm btn-danger"> Delete </a>
                </td>
            </tr>
            
        }
    </tbody>
</table>